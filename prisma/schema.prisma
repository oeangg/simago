// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/genesrated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id           String            @id @default(cuid())
  code         String            @unique
  name         String
  customerType CustomerType
  statusActive StatusActive      @default(ACTIVE)
  activeDate  DateTime  @default(now()) 
  notes        String?
  npwpNumber   String?
  npwpName     String?
  npwpAddress  String?
  npwpDate     DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  addresses    CustomerAddress[]
  contacts     CustomerContact[]

  @@index([name])
}

model CustomerAddress {
  id               String      @id @default(cuid())
  addressType      AddressType
  addressLine1     String
  addressLine2     String?
  zipcode          String?
  isPrimaryAddress Boolean
  customerId       String
  countryCode      String
  provinceCode     String? //optional domestic/international
  regencyCode      String? //optional domestic/international
  districtCode     String? //optional domestic/international
  customer         Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  country          Country     @relation(fields: [countryCode], references: [code])
  province         Province?   @relation(fields: [provinceCode], references: [code])
  regency          Regency?    @relation(fields: [regencyCode], references: [code])
  district         District?   @relation(fields: [districtCode], references: [code])

  @@unique([customerId, isPrimaryAddress], name: "OnePrimaryAddressPerCustomer")
  @@unique([customerId, addressType], name: "OneAddressTypePerCustomer")
}

model CustomerContact {
  id               String      @id @default(cuid())
  contactType      ContactType
  name             String
  phoneNumber      String
  email            String?
  isPrimaryContact Boolean
  customerId       String
  customer         Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, isPrimaryContact], name: "OnePrimaryContactPerCustomer")
  @@unique([customerId, contactType], name: "OneContactTypePerCustomer")
}

model Country {
  code            String            @id
  name            String
  customerAddress CustomerAddress[]

  @@index([name])
}

model Province {
  code            String            @id
  name            String
  customerAddress CustomerAddress[]
  regencies       Regency[]

  @@index([name])
}

model Regency {
  code            String            @id
  name            String
  provinceCode    String
  customerAddress CustomerAddress[]
  province        Province          @relation(fields: [provinceCode], references: [code])
  district        District[]

  @@index([name])
}

model District {
  code            String            @id
  name            String
  regencyCode     String
  customerAddress CustomerAddress[]
  regency         Regency           @relation(fields: [regencyCode], references: [code])

  @@index([name])
}

model Employee {
  id          String       @id @default(cuid())
  nik         String       @unique
  name        String
  isActive    Boolean      @default(true)
  gender      Gender
  address     String
  city        String
  zipcode     String
  photo       String?
  phoneNumber String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  employments Employment[]

  @@index([name])
  @@index([phoneNumber])
}

model Employment {
  id         String    @id @default(cuid())
  startDate  DateTime
  endDate    DateTime?
  positionId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  position   Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Position {
  id          String       @id @default(cuid())
  name        String       @unique
  employments Employment[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  fullname  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  profilPic String?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session?
}

//enum
enum Gender {
  MALE
  FEMALE
}

enum StatusActive {
  ACTIVE
  NOACTIVE
  SUSPENDED
}

enum CustomerType {
  DOMESTIC
  INTERNATIONAL
}

enum AddressType {
  HEAD_OFFICE
  BRANCH
  WAREHOUSE
  BILLING
  SHIPPING
}

enum ContactType {
  PRIMARY
  BILLING
  SHIPPING
  EMERGENCY
  TECHNICAL
}

enum Role {
  USER
  SUPERVISOR
  MANAGER
  ADMIN
  SUPER_ADMIN
}
