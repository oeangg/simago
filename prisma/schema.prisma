// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/genesrated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id           String            @id @default(cuid())
  code         String            @unique
  name         String
  statusActive StatusActive      @default(ACTIVE)
  activeDate   DateTime          @default(now())
  notes        String?
  npwpNumber   String?
  npwpName     String?
  npwpAddress  String?
  npwpDate     DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  addresses    CustomerAddress[]
  contacts     CustomerContact[]

  @@index([name])
  @@map("customers")
}

model CustomerAddress {
  id               String      @id @default(cuid())
  addressType      AddressType
  addressLine1     String
  addressLine2     String?
  zipcode          String?
  isPrimaryAddress Boolean
  customerId       String
  countryCode      String
  provinceCode     String? //optional domestic/international
  regencyCode      String? //optional domestic/international
  districtCode     String? //optional domestic/international
  customer         Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  country          Country     @relation(fields: [countryCode], references: [code])
  province         Province?   @relation(fields: [provinceCode], references: [code])
  regency          Regency?    @relation(fields: [regencyCode], references: [code])
  district         District?   @relation(fields: [districtCode], references: [code])

  @@unique([customerId, isPrimaryAddress], name: "OnePrimaryAddressPerCustomer")
  @@unique([customerId, addressType], name: "OneAddressTypePerCustomer")
  @@map("customer_addresses")
}

model CustomerContact {
  id               String      @id @default(cuid())
  contactType      ContactType
  name             String
  phoneNumber      String
  email            String?
  isPrimaryContact Boolean
  customerId       String
  customer         Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, isPrimaryContact], name: "OnePrimaryContactPerCustomer")
  @@unique([customerId, contactType], name: "OneContactTypePerCustomer")
  @@map("customer_contacts")
}

//
model Driver {
  id           String   @id @default(cuid())
  code         String   @unique
  name         String
  gender       Gender
  addressLine1 String
  addressLine2 String?
  city         String
  phoneNumber  String
  statusActive Boolean  @default(true)
  activeDate   DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([name])
  @@map("drivers")
}

model Vehicle {
  id            String      @id @default(cuid())
  vehicleNumber String      @unique
  vehicleType   VehicleType
  vehicleMake   String?
  vehicleYear   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("vehicles")
}

//

enum VehicleType {
  BOX
  TRUCK
  MOTORCYCLE
}

model Vendor {
  id              String          @id @default(cuid())
  code            String          @unique
  name            String
  vendorType      VendorType
  statusActive    StatusActive    @default(ACTIVE)
  activeDate      DateTime        @default(now())
  picName         String?
  picPosition     String?
  notes           String?
  npwpNumber      String?
  npwpName        String?
  npwpAddress     String?
  paymentTerms    Int
  npwpDate        DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  vendorAddresses VendorAddress[]
  vendorBankings  VendorBanking[]
  vendorContacts  VendorContact[]

  @@index([name])
  @@map("vendors")
}

model VendorAddress {
  id               String      @id @default(cuid())
  addressType      AddressType
  addressLine1     String
  addressLine2     String?
  zipcode          String?
  isPrimaryAddress Boolean
  vendorId         String
  countryCode      String
  provinceCode     String? //optional domestic/international
  regencyCode      String? //optional domestic/international
  districtCode     String? //optional domestic/international
  vendor           Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  country          Country     @relation(fields: [countryCode], references: [code])
  province         Province?   @relation(fields: [provinceCode], references: [code])
  regency          Regency?    @relation(fields: [regencyCode], references: [code])
  district         District?   @relation(fields: [districtCode], references: [code])

  @@unique([vendorId, isPrimaryAddress], name: "OnePrimaryAddressPerVendor")
  @@unique([vendorId, addressType], name: "OneAddressTypePerVendor")
  @@map("vendor_addresses")
}

model VendorContact {
  id               String      @id @default(cuid())
  contactType      ContactType
  name             String
  phoneNumber      String
  faxNumber        String?
  email            String?
  isPrimaryContact Boolean
  vendorId         String
  vendor           Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, isPrimaryContact], name: "OnePrimaryContactPerVendor")
  @@unique([vendorId, contactType], name: "OneContactTypePerVendor")
  @@map("vendor_contacts")
}

model VendorBanking {
  id                     String      @id @default(cuid())
  bankingNumber          String      @unique
  bankingName            String
  bankingBank            BankingBank
  bankingBranch          String
  isPrimaryBankingNumber Boolean
  vendorId               String
  vendor                 Vendor      @relation(fields: [vendorId], references: [id])

  @@unique([vendorId, isPrimaryBankingNumber], name: "OnePrimaryBankingNumberPerVendor")
  @@index([bankingNumber])
  @@map("vendor_bankings")
}

model Country {
  code            String            @id
  name            String
  customerAddress CustomerAddress[]
  supplierAddress SupplierAddress[]
  vendorAddress   VendorAddress[]

  @@index([name])
  @@map("countries")
}

model Province {
  code            String            @id
  name            String
  customerAddress CustomerAddress[]
  supplierAddress SupplierAddress[]
  vendorAddress   VendorAddress[]
  regencies       Regency[]

  @@index([name])
  @@map("provinces")
}

model Regency {
  code            String            @id
  name            String
  provinceCode    String
  customerAddress CustomerAddress[]
  supplierAddress SupplierAddress[]
  vendorAddress   VendorAddress[]
  province        Province          @relation(fields: [provinceCode], references: [code])
  district        District[]

  @@index([name])
  @@map("regencies")
}

model District {
  code            String            @id
  name            String
  regencyCode     String
  customerAddress CustomerAddress[]
  supplierAddress SupplierAddress[]
  vendorAddress   VendorAddress[]
  regency         Regency           @relation(fields: [regencyCode], references: [code])

  @@index([name])
  @@map("districts")
}

model Employee {
  id          String       @id @default(cuid())
  nik         String       @unique
  name        String
  isActive    Boolean      @default(true)
  activeDate  DateTime
  resignDate  DateTime?
  gender      Gender
  address     String
  city        String
  zipcode     String
  photo       String?
  ttdDigital  String?
  phoneNumber String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  employments Employment[]

  @@index([name])
  @@index([phoneNumber])
  @@map("employees")
}

model Employment {
  id         String    @id @default(cuid())
  startDate  DateTime
  endDate    DateTime?
  positionId String
  divisionId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  position   Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  division   Division  @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employments")
}

//
model Material {
  id                String            @id @default(cuid())
  code              String            @unique // Kode material unik
  name              String
  description       String?
  category          MaterialCategory
  unit              Unit
  brand             Brand
  currentStock      Int               @default(0)
  minimumStock      Int               @default(0)
  maximumStock      Int?
  goodStock         Int?
  badStock          Int?
  lastPurchasePrice Decimal?          @db.Decimal(10, 2)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  materialInItems   MaterialInItem[]
  materialOutItems  MaterialOutItem[]

  @@index([name])
  @@map("materials")
}

model MaterialIn {
  id                   String           @id @default(cuid())
  transactionNo        String           @unique //bisa autogenerat
  supplierId           String
  supplierName         String
  transactionDate      DateTime         @default(now())
  invoiceNo            String? // Nomor invoice dari supplier
  totalAmountBeforeTax Decimal          @db.Decimal(12, 2)
  totalTax             Decimal?         @db.Decimal(12, 2)
  otherCosts           Decimal?         @db.Decimal(12, 2)
  totalAmount          Decimal          @db.Decimal(12, 2)
  notes                String?
  createdBy            String
  createdByUser        User             @relation(fields: [createdBy], references: [id])
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  // Relations - items detail
  items                MaterialInItem[]

  @@map("material_ins")
}

model MaterialInItem {
  id           String     @id @default(cuid())
  materialInId String
  materialIn   MaterialIn @relation(fields: [materialInId], references: [id], onDelete: Cascade)
  materialId   String
  material     Material   @relation(fields: [materialId], references: [id])
  quantity     Int
  unitPrice    Decimal    @db.Decimal(10, 2)
  totalPrice   Decimal    @db.Decimal(12, 2) // quantity * unitPrice
  notes        String?
  stockBefore  Int // Stock sebelum transaksi
  stockAfter   Int // Stock setelah transaksi
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("material_in_items")
}

model MaterialOut {
  id                   String            @id @default(cuid())
  transactionNo        String            @unique // 
  customerName         String? // Denormalisasi
  orderId              String? // Reference ke order/project
  shipmentId           String? // Reference ke shipment
  destinationType      String // "CUSTOMER", "PROJECT", "INTERNAL_USE", "WASTE", etc.
  transactionDate      DateTime          @default(now())
  totalAmountBeforeTax Decimal           @db.Decimal(12, 2)
  totalTax             Decimal           @db.Decimal(12, 2)
  otherCosts           Decimal           @db.Decimal(12, 2)
  totalAmount          Decimal           @db.Decimal(12, 2)
  notes                String?
  createdBy            String
  createdByUser        User              @relation(fields: [createdBy], references: [id])
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  items                MaterialOutItem[]

  @@map("material_outs")
}

model MaterialOutItem {
  id            String      @id @default(cuid())
  materialOutId String
  materialOut   MaterialOut @relation(fields: [materialOutId], references: [id], onDelete: Cascade)
  materialId    String
  material      Material    @relation(fields: [materialId], references: [id])

  quantity  Int
  unitCost  Decimal? @db.Decimal(10, 2) // Cost per unit (untuk internal costing)
  totalCost Decimal? @db.Decimal(12, 2) // quantity * unitCost
  notes     String?

  // Stock tracking
  stockBefore Int // Stock sebelum transaksi
  stockAfter  Int // Stock setelah transaksi

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("material_out_items")
}

//
model Position {
  id          String       @id @default(cuid())
  name        String       @unique
  employments Employment[]

  @@map("positions")
}

model Division {
  id          String       @id @default(cuid())
  name        String       @unique
  employments Employment[]

  @@map("divisions")
}

model Supplier {
  id           String            @id @default(cuid())
  code         String            @unique
  name         String
  supplierType SupplierType
  statusActive StatusActive      @default(ACTIVE)
  activeDate   DateTime          @default(now())
  notes        String?
  npwpNumber   String?
  npwpName     String?
  npwpAddress  String?
  npwpDate     DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  addresses    SupplierAddress[]
  contacts     SupplierContact[]

  @@index([name])
  @@map("suppliers")
}

model SupplierAddress {
  id               String      @id @default(cuid())
  addressType      AddressType
  addressLine1     String
  addressLine2     String?
  zipcode          String?
  isPrimaryAddress Boolean
  supplierId       String
  countryCode      String
  provinceCode     String? //optional domestic/international
  regencyCode      String? //optional domestic/international
  districtCode     String? //optional domestic/international
  supplier         Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  country          Country     @relation(fields: [countryCode], references: [code])
  province         Province?   @relation(fields: [provinceCode], references: [code])
  regency          Regency?    @relation(fields: [regencyCode], references: [code])
  district         District?   @relation(fields: [districtCode], references: [code])

  @@unique([supplierId, isPrimaryAddress], name: "OnePrimaryAddressPerSupplier")
  @@unique([supplierId, addressType], name: "OneAddressTypePerSupplier")
  @@map("supplier_addresses")
}

model SupplierContact {
  id               String      @id @default(cuid())
  contactType      ContactType
  name             String
  phoneNumber      String
  email            String?
  isPrimaryContact Boolean
  supplierId       String
  supplier         Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, isPrimaryContact], name: "OnePrimaryContactPerSupplier")
  @@unique([supplierId, contactType], name: "OneContactTypePerSupplier")
  @@map("supplier_contacts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  fullname  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  profilPic String?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session?

  //realtion stock
  materialIns  MaterialIn[]
  materialOuts MaterialOut[]

  @@map("users")
}

//enum

enum AddressType {
  HEAD_OFFICE
  BRANCH
  WAREHOUSE
  BILLING
  SHIPPING
}

enum BankingBank {
  BRI
  BCA
  BNI
  BNI_SYARIAH
  DANAMON
  JAGO
  MANDIRI
  AEON
}

enum Brand {
  SAMSUNG
  BOSCH
  SONY
  PANASONIC
  MITSUBISHI
  SIEMENS
  ABB
  SCHNEIDER
  GENERIC
  OTHER
}

//

enum CustomerType {
  DOMESTIC
  INTERNATIONAL
}

enum ContactType {
  PRIMARY
  BILLING
  SHIPPING
  EMERGENCY
  TECHNICAL
}

enum Gender {
  MALE
  FEMALE
}

enum MaterialCategory {
  ELECTRONIC
  MECHANICAL
  CHEMICAL
  PACKAGING
  TOOLS
  SPARE_PARTS
  CONSUMABLES
  RAW_MATERIAL
}

enum Role {
  USER
  SUPERVISOR
  MANAGER
  ADMIN
  SUPER_ADMIN
}

enum StatusActive {
  ACTIVE
  NOACTIVE
  SUSPENDED
}

enum SupplierType {
  LOGISTIC
  SERVICES
}

enum VendorType {
  LOGISTIC
  SERVICES
}

enum Unit {
  PCS
  KG
  LITER
  METER
  BOX
  ROLL
  SET
  PACK
}
